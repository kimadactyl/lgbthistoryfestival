---
title: Schedule
---
- require 'set'

- popular = FestivalCalendar::POPULAR
- days = FestivalCalendar::DAYS


%section
  .row
    .small-12.columns.text-center
      %h2.longborder Schedule

      %p.pinkcaps
        All events are free unless otherwise noted. Non-ticketed events are first-come, first-served: please arrive in plenty of time to avoid disappointment.
  .row
    .medium-2.columns
      %p
    .small-12.medium-8.text-center.columns
      :markdown
        Events which require booking have a <i class="icon-ticket"/> ticket icon &mdash; click on the event for a booking link. Check our [Twitter](http://twitter.com/lgbthistoryfest) or [Facebook](https://www.facebook.com/lgbthistoryfestival) for up-to-the-minute updates

        *Please note times and events are subject to change.*
      .nocontrols
        :markdown
          **Apologies, your browser does not support features needed for filtering controls, and schedule output is currently suboptimal.** We're working on it: in the mean time, please try a modern, non-iOS browser for best support.
    .medium-2.columns
      %p
  .row
    .small-12.text-center.controls
      %ul#key.schedule.medium-block-grid-6.small-block-grid-3
        %li.filter{"data-filter" => ".main-festival"}
          %i.icon-star
          %h4 Main Festival
        %li.filter{"data-filter" => ".family-space"}
          %i.icon-school
          %h4 Family Space
        %li.filter{"data-filter" => ".films"}
          %i.icon-video
          %h4 Films
        %li.filter{"data-filter" => ".theatre"}
          %i.icon-theatre
          %h4 Theatre
        %li.filter{"data-filter" => ".fringe"}
          %i.icon-map
          %h4 Fringe
        %li.filter{"data-filter" => ".conference"}
          %i.icon-book
          %h4 Conference
      =partial 'speakerlist'


    .small-12.columns.schedcontainer
      %ul#program.schedule
        - days.each do |day, time|
          .daytitle
            %h2= day
            - case day
            - when 'Monday'
              :markdown
                ### 9th February
            - when 'Tuesday'
              :markdown
                ### 10th February
            - when 'Wednesday'
              :markdown
                ### 11th February
            - when 'Thursday'
              :markdown
                ### 12th February
            - when 'Friday'
              :markdown
                ### 13th February
            - when 'Saturday'
              %h3 14th February
              .daynotes
                :markdown
                  All Saturday events are at Manchester Central Library's performance space, apart from <i class="icon-map"></i> Fringe events at the Joyce Layland LGBT Centre and the Working Class movement library. See individual event listings for details, and our [travel page](/travel.html) for venue information.

                  <i class="icon-facebook"/>[Facebook event page](https://www.facebook.com/events/430094297142000/)
            - when 'Sunday'
              %h3 15th February
              .daynotes
                :markdown
                  All Sunday events are at People's History Museum. See our [travel page](/travel.html) for venue information.

                  <i class="icon-facebook"/>[Facebook event page](https://www.facebook.com/events/328947467315710/)
          .dayevents
            - popular.get_start_times(time).each do |time|
              .timegroup
                .timecol
                  %h3.time= time.dtstart.strftime("%H:%M")
                .timeblock
                  - eventlists = popular.get_events(time)
                  - eventlists.each do |list,events|
                    - events.each_with_index do |event, idx|
                      - friendlyname = data.events[event.uid]
                      %a{:"data-remodal-target" => "#{friendlyname}"}
                        - speakers = Set.new();
                        - data.contribs.each do |_, details|
                          - if details.events.include? event.uid.to_s
                            - speakers << details.urlname
                        %li{:class => "mix event #{list.to_s.parameterize} #{'has-description' if event.description.present?} #{speakers.to_a.join(" ")}"}
                          .event-icon
                            - case list.to_s.parameterize
                            - when 'films'
                              %i.icon-video
                            - when 'family-space'
                              %i.icon-school
                            - when 'theatre'
                              %i.icon-theatre
                            - when 'conference'
                              %i.icon-book
                            - when 'fringe'
                              %i.icon-map
                            - else
                              %p
                          .event-title
                            -# If there's a colon, bold the first half and not  second half.
                            - sections = RubyPants.new(event.summary).to_html.split(":")
                            - if sections.length > 1
                              %strong= sections[0] + ":"
                              = sections[1]
                            - else
                              %strong= sections[0]
                            .location= event.location.split(",").first
                          .event-meta
                            - duration = ((event.dtend - event.dtstart)/60).to_i
                            %div.duration= "#{duration} mins"
                            = "<div class='ticket'><i class='needsticket icon-ticket'></i> #{data.ticketed[friendlyname].cost}</div>" if data.ticketed[friendlyname]

.remodal-bg
  - days.each do |_, time|
    - popular.get_start_times(time).each do |time|
      - eventlists = popular.get_events(time)
      - eventlists.each do |list, events|
        - events.each do |event|
          - friendly_name = data.events[event.uid]
          %div.remodal(data-remodal-id="#{friendly_name}")
            %h3
              -# If there's a colon, bold the first half and not  second half.
              - sections = RubyPants.new(event.summary).to_html.split(":")
              - if sections.length > 1
                %strong= sections[0] + ":"
                = sections[1]
              - else
                %strong= sections[0]

            %h5
              = event.dtstart.strftime("%H:%M &mdash;") 
              = event.dtend.strftime("%H:%M, ") 
              = event.dtstart.strftime("%A %e %B, ")
              = event.location.split(",").first

            %h5                
              - ticketed = data.ticketed[friendly_name]

              - if (list.to_s.parameterize == "conference")
                // If it's the conference, then show conference link
                = link_to "http://crm.lgbthistoryfestival.org/civicrm/event/info?reset=1&id=2" do
                  %i.icon-ticket                  
                  Conference ticket
              - if (ticketed && list.to_s.parameterize == "conference")
                // If there's a single event ticket for the conference, show them that too
                = link_to ticketed.url do
                  %i.icon-ticket
                  Single event ticket
                  = ticketed.cost    
              - elsif (ticketed)
                // Otherwise, if there are tickets...
                -if (ticketed.cost == "free")
                  // Do this if it's free
                  = link_to ticketed.url do
                    %i.icon-ticket
                    Free ticket required
                - elsif (ticketed.cost == "sold out")
                  // This if sold out
                  %i.icon-ticket
                  SOLD OUT
                - elsif (ticketed.cost)
                  // This if they can pay
                  = link_to ticketed.url do
                    %i.icon-ticket 
                    Ticket required:
                    = ticketed.cost
              - else
                // Else they can come with no ticket
                = "Free &mdash; no ticket required"

            %div.description
              = parseEvent(Kramdown::Document.new(event.description).to_html)
