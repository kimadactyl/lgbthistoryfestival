---
title: Schedule
---
:ruby
  require 'open-uri'
  require 'icalendar'

  days = {  "Friday" => Time.new(2015,2,13),
            "Saturday" => Time.new(2015,2,14),
            "Sunday" => Time.new(2015,2,15) }

  class CalendarSorter

    def initialize(url_array)
      @cals = []
      # Load and sort the array
      url_array.each do |key,url|
        @cals << Icalendar.parse(open(url)).first
      end
      # Unfortunately this creates an unwanted index so we need to rebuild
      # First, create a blank object
      # combine = Icalendar::Calendar.new
      # # For each cal, iterate each event and load it into our new calendar
      # @cals.each do |cal|
      #   cal.events.each do |event|
      #     combine.events << event
      #   end
      # end
      # # And reassign.
      # @cals = combine
      @cals.each do |cal|
        cal.events.sort! { |a,b| a.dtstart <=> b.dtstart }
      end
    end

    def get_start_times(start)
      # Tell us all the possible event starting times
      t = []
      @cals.each do |cal|
        t += cal.events.uniq { |a| a.dtstart.to_s }
      end
      t.select { |a| a.dtstart.between?(start, start + 24.hours) }
    end

    def get_events(time)
      # Get all the.events for a given time
      e = {}
      @cals.each do |cal|
        e[cal.x_wr_calname] = cal.events.select { |a| a.dtstart == time.dtstart }
      end
      e
    end

  end

  academic = CalendarSorter.new({ "Academic" => "https://www.google.com/calendar/ical/lgbthistoryfestival.org_8mtrc289k99o4g90rc9cgce3io%40group.calendar.google.com/public/basic.ics"})
  popular = CalendarSorter.new({ 
              "Main Festival" => "https://www.google.com/calendar/ical/kim%40lgbthistoryfestival.org/public/basic.ics",
              "Family Space" => "https://www.google.com/calendar/ical/lgbthistoryfestival.org_0gc2nrd6ls6fjbuuf8icuju3ag%40group.calendar.google.com/public/basic.ics",
              "Films" => "https://www.google.com/calendar/ical/lgbthistoryfestival.org_qtra32a7f24jpc75ghjuffeops%40group.calendar.google.com/public/basic.ics",
              "Theatre" => "https://www.google.com/calendar/ical/lgbthistoryfestival.org_ijgln6bmp4th9sg6stditdv7ok%40group.calendar.google.com/public/basic.ics",
              "Conference" => "https://www.google.com/calendar/ical/lgbthistoryfestival.org_8mtrc289k99o4g90rc9cgce3io%40group.calendar.google.com/public/basic.ics"})
%section
  .row
    .small-12.columns.text-center
      %ul.schedule.key
        %li.main-festival Main Festival
        %li.family-space Family Space
        %li.films Films
        %li.theatre Theatre
        %li.conference Conference
      %form.schedule-type
        %input{:type => "radio", :name => "expanded", :id => "s-compact", :value => "0", :checked => "checked"} 
        %label{:for => "s-compact"} Compact Schedule
        %input{:type => "radio", :name => "expanded", :id => "s-expanded", :value => "1"} 
        %label{:for => "s-expanded"} Expanded Schedule
    .small-12.columns
      %ul.schedule.program
        - days.each do |day, time|
          %h2= day
          - popular.get_start_times(time).each do |time|
            .timegroup
              %h3.time= time.dtstart.strftime("%H:%M")
              .timeblock
                - eventlists = popular.get_events(time)
                - eventlists.each do |list,events|
                  - events.each do |event|
                    %li{:class => "#{list.to_s.parameterize}"}
                      %strong= event.summary
                      %span.description= event.description
                      - duration = ((event.dtend - event.dtstart)/60).to_i
                      %em.duration= "(#{duration} mins)"

:javascript
  $( document ).ready(function() {
    // Hide the extended defs
    $("ul.program .description").hide();
    // Hide the conference initially
    $("ul.program .conference").toggle();
    // Toggle off the conference button
    $("ul.key .conference").toggleClass('disabled');

    // Check to see if any rows are empty and hide the times
    function checkBlanks(){
        $(".timegroup").each(function() {
        if($('.timeblock', this).children(':visible').length == 0) {
          $('h3.time', this).hide();
        } else {
          $('h3.time', this).show();
        }
      })
    }
    checkBlanks();

    // Wire up buttons to trigger appropriate sections
    function toggleProgram($trigger, $element){
      $trigger.click(function(){
        $element.toggle();
        $trigger.toggleClass('disabled');
        checkBlanks();
      })
    }
    toggleProgram($("ul.key .main-festival"), $("ul.program .main-festival"));
    toggleProgram($("ul.key .family-space"), $("ul.program .family-space"));
    toggleProgram($("ul.key .films"), $("ul.program .films"));
    toggleProgram($("ul.key .theatre"), $("ul.program .theatre"));
    toggleProgram($("ul.key .conference"), $("ul.program .conference"));

    // Check for click events on expanded/contracted selector
    $("input[name='expanded']").click(function() {
      if($(this).attr("value")=="0"){
        $("ul.program .description").hide();
      } 
      if ($(this).attr("value")=="1"){
        $("ul.program .description").show();   
      }
    });
  });